{"ast":null,"code":"// import React ,{useEffect}from 'react';\n// const { kakao } = window;\n// const Food = () => {\n//             // 카테고리 검색을 요청하는 함수입니다\n//             function searchPlaces(currCategory) {\n//                 alert('지도 검색! ')\n//                 if (!currCategory) {\n//                     return;\n//                 }\n//                 // 커스텀 오버레이를 숨깁니다 \n//                 placeOverlay.setMap(null);\n//                 // 지도에 표시되고 있는 마커를 제거합니다\n//                 removeMarker();\n//                 ps.categorySearch(currCategory, placesSearchCB, {useMapBounds:true}); \n//             }\n//         // 마커를 클릭했을 때 해당 장소의 상세정보를 보여줄 커스텀오버레이입니다\n//         var placeOverlay = new kakao.maps.CustomOverlay({zIndex:1}), \n//         contentNode = document.createElement('div'), // 커스텀 오버레이의 컨텐츠 엘리먼트 입니다 \n//         markers = [], // 마커를 담을 배열입니다\n//         currCategory = ''; // 현재 선택된 카테고리를 가지고 있을 변수입니다\n//     useEffect(() => {\n//         let container = document.getElementById(\"map\");\n//         let options = {\n//           center: new kakao.maps.LatLng(37.520126, 126.929827),\n//           level: 3,\n//         };\n//         //지도를 생성합니다\n//         let map = new kakao.maps.Map(container, options);\n//         /************************************************************\n//          *  테마별 지도 조회 \n//          *********************************************************************/\n//                         // 장소 검색 객체를 생성합니다\n//             var ps = new kakao.maps.services.Places(map); \n//             // 지도에 idle 이벤트를 등록합니다\n//             kakao.maps.event.addListener(map, 'idle', searchPlaces);\n//             // 커스텀 오버레이의 컨텐츠 노드에 css class를 추가합니다 \n//             contentNode.className = 'placeinfo_wrap';\n//             // 커스텀 오버레이의 컨텐츠 노드에 mousedown, touchstart 이벤트가 발생했을때\n//             // 지도 객체에 이벤트가 전달되지 않도록 이벤트 핸들러로 kakao.maps.event.preventMap 메소드를 등록합니다 \n//             addEventHandle(contentNode, 'mousedown', kakao.maps.event.preventMap);\n//             addEventHandle(contentNode, 'touchstart', kakao.maps.event.preventMap);\n//             // 커스텀 오버레이 컨텐츠를 설정합니다\n//             placeOverlay.setContent(contentNode);  \n//             // 각 카테고리에 클릭 이벤트를 등록합니다\n//             addCategoryClickEvent();\n//             // 엘리먼트에 이벤트 핸들러를 등록하는 함수입니다\n//             function addEventHandle(target, type, callback) {\n//                 if (target.addEventListener) {\n//                     target.addEventListener(type, callback);\n//                 } else {\n//                     target.attachEvent('on' + type, callback);\n//                 }\n//             }\n//             // 카테고리 검색을 요청하는 함수입니다\n//             function searchPlaces() {\n//                 if (!currCategory) {\n//                     return;\n//                 }\n//                 // 커스텀 오버레이를 숨깁니다 \n//                 placeOverlay.setMap(null);\n//                 // 지도에 표시되고 있는 마커를 제거합니다\n//                 removeMarker();\n//                 ps.categorySearch(currCategory, placesSearchCB, {useMapBounds:true}); \n//             }\n//             searchPlaces(removeMarker,placesSearchCB,ps,currCategory)\n//             // 장소검색이 완료됐을 때 호출되는 콜백함수 입니다\n//             function placesSearchCB(data, status, pagination) {\n//                 if (status === kakao.maps.services.Status.OK) {\n//                     // 정상적으로 검색이 완료됐으면 지도에 마커를 표출합니다\n//                     displayPlaces(data);\n//                 } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\n//                     // 검색결과가 없는경우 해야할 처리가 있다면 이곳에 작성해 주세요\n//                 } else if (status === kakao.maps.services.Status.ERROR) {\n//                     // 에러로 인해 검색결과가 나오지 않은 경우 해야할 처리가 있다면 이곳에 작성해 주세요\n//                 }\n//             }\n//             // 지도에 마커를 표출하는 함수입니다\n//             function displayPlaces(places) {\n//                 // 몇번째 카테고리가 선택되어 있는지 얻어옵니다\n//                 // 이 순서는 스프라이트 이미지에서의 위치를 계산하는데 사용됩니다\n//                 var order = document.getElementById(currCategory).getAttribute('data-order');\n//                 for ( var i=0; i<places.length; i++ ) {\n//                         // 마커를 생성하고 지도에 표시합니다\n//                         var marker = addMarker(new kakao.maps.LatLng(places[i].y, places[i].x), order);\n//                         // 마커와 검색결과 항목을 클릭 했을 때\n//                         // 장소정보를 표출하도록 클릭 이벤트를 등록합니다\n//                         (function(marker, place) {\n//                             kakao.maps.event.addListener(marker, 'click', function() {\n//                                 displayPlaceInfo(place);\n//                             });\n//                         })(marker, places[i]);\n//                 }\n//             }\n//             // 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\n//             function addMarker(position, order) {\n//                 var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/places_category.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다\n//                     imageSize = new kakao.maps.Size(27, 28),  // 마커 이미지의 크기\n//                     imgOptions =  {\n//                         spriteSize : new kakao.maps.Size(72, 208), // 스프라이트 이미지의 크기\n//                         spriteOrigin : new kakao.maps.Point(46, (order*36)), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\n//                         offset: new kakao.maps.Point(11, 28) // 마커 좌표에 일치시킬 이미지 내에서의 좌표\n//                     },\n//                     markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),\n//                         marker = new kakao.maps.Marker({\n//                         position: position, // 마커의 위치\n//                         image: markerImage \n//                     });\n//                 marker.setMap(map); // 지도 위에 마커를 표출합니다\n//                 markers.push(marker);  // 배열에 생성된 마커를 추가합니다\n//                 return marker;\n//             }\n//             // 지도 위에 표시되고 있는 마커를 모두 제거합니다\n//             function removeMarker() {\n//                 for ( var i = 0; i < markers.length; i++ ) {\n//                     markers[i].setMap(null);\n//                 }   \n//                 markers = [];\n//             }\n//             // 클릭한 마커에 대한 장소 상세정보를 커스텀 오버레이로 표시하는 함수입니다\n//             function displayPlaceInfo (place) {\n//                 var content = '<div class=\"placeinfo\">' +\n//                                 '   <a class=\"title\" href=\"' + place.place_url + '\" target=\"_blank\" title=\"' + place.place_name + '\">' + place.place_name + '</a>';   \n//                 if (place.road_address_name) {\n//                     content += '    <span title=\"' + place.road_address_name + '\">' + place.road_address_name + '</span>' +\n//                                 '  <span class=\"jibun\" title=\"' + place.address_name + '\">(지번 : ' + place.address_name + ')</span>';\n//                 }  else {\n//                     content += '    <span title=\"' + place.address_name + '\">' + place.address_name + '</span>';\n//                 }                \n//                 content += '    <span class=\"tel\">' + place.phone + '</span>' + \n//                             '</div>' + \n//                             '<div class=\"after\"></div>';\n//                 contentNode.innerHTML = content;\n//                 placeOverlay.setPosition(new kakao.maps.LatLng(place.y, place.x));\n//                 placeOverlay.setMap(map);  \n//             }\n//             // 각 카테고리에 클릭 이벤트를 등록합니다\n//             function addCategoryClickEvent() {\n//                 var category = document.getElementById('category'),\n//                     children = category.children;\n//                 for (var i=0; i<children.length; i++) {\n//                     children[i].onclick = onClickCategory;\n//                 }\n//             }\n//             // 카테고리를 클릭했을 때 호출되는 함수입니다\n//             function onClickCategory() {\n//                 var id = this.id,\n//                     className = this.className;\n//                 let placeOverlay = placeOverlay.setMap(null);\n//                 if (className === 'on') {\n//                     currCategory = '';\n//                     changeCategoryClass();\n//                     removeMarker();\n//                 } else {\n//                     currCategory = id;\n//                     changeCategoryClass(this);\n//                     searchPlaces();\n//                 }\n//             }\n//             // 클릭된 카테고리에만 클릭된 스타일을 적용하는 함수입니다\n//             function changeCategoryClass(el) {\n//                 var category = document.getElementById('category'),\n//                     children = category.children,\n//                     i;\n//                 for ( i=0; i<children.length; i++ ) {\n//                     children[i].className = '';\n//                 }\n//                 if (el) {\n//                     el.className = 'on';\n//                 } \n//             } \n//         /************************************************************************* */\n//         console.log(\"loading kakaomap\");\n//       }, []);\n//     return (\n//         <div>\n//             wwdwdsdsdsd\n//             <div style={{width:'500px',height:'400px'}} id=\"map\">\n//             <ul id=\"category\">\n//         <li onClick={()=>searchPlaces('BK9')}id=\"BK9\" data-order=\"0\"> \n//             <span class=\"category_bg bank\"></span>\n//             은행\n//         </li>       \n//         <li id=\"MT1\" data-order=\"1\"> \n//             <span class=\"category_bg mart\"></span>\n//             마트\n//         </li>  \n//         <li id=\"PM9\" data-order=\"2\"> \n//             <span class=\"category_bg pharmacy\"></span>\n//             약국\n//         </li>  \n//         <li id=\"OL7\" data-order=\"3\"> \n//             <span class=\"category_bg oil\"></span>\n//             주유소\n//         </li>  \n//         <li id=\"CE7\" data-order=\"4\"> \n//             <span class=\"category_bg cafe\"></span>\n//             카페\n//         </li>  \n//         <li id=\"CS2\" data-order=\"5\"> \n//             <span class=\"category_bg store\"></span>\n//             편의점\n//         </li>      \n//     </ul>\n//                 </div>\n//         </div>\n//     );\n// };\n// export default Food;","map":{"version":3,"sources":["C:/Users/roberto/Desktop/스터디/Restaurant/netrestaurantClient/src/components/category/Food.js"],"names":[],"mappings":"AAAA;AAEA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React ,{useEffect}from 'react';\r\n\r\n// const { kakao } = window;\r\n\r\n\r\n\r\n\r\n\r\n// const Food = () => {\r\n\r\n//             // 카테고리 검색을 요청하는 함수입니다\r\n//             function searchPlaces(currCategory) {\r\n//                 alert('지도 검색! ')\r\n//                 if (!currCategory) {\r\n//                     return;\r\n//                 }\r\n                \r\n//                 // 커스텀 오버레이를 숨깁니다 \r\n//                 placeOverlay.setMap(null);\r\n\r\n//                 // 지도에 표시되고 있는 마커를 제거합니다\r\n//                 removeMarker();\r\n                \r\n//                 ps.categorySearch(currCategory, placesSearchCB, {useMapBounds:true}); \r\n//             }\r\n\r\n//         // 마커를 클릭했을 때 해당 장소의 상세정보를 보여줄 커스텀오버레이입니다\r\n//         var placeOverlay = new kakao.maps.CustomOverlay({zIndex:1}), \r\n//         contentNode = document.createElement('div'), // 커스텀 오버레이의 컨텐츠 엘리먼트 입니다 \r\n//         markers = [], // 마커를 담을 배열입니다\r\n//         currCategory = ''; // 현재 선택된 카테고리를 가지고 있을 변수입니다\r\n\r\n//     useEffect(() => {\r\n\r\n\r\n//         let container = document.getElementById(\"map\");\r\n    \r\n//         let options = {\r\n//           center: new kakao.maps.LatLng(37.520126, 126.929827),\r\n//           level: 3,\r\n//         };\r\n    \r\n//         //지도를 생성합니다\r\n//         let map = new kakao.maps.Map(container, options);\r\n    \r\n        \r\n//         /************************************************************\r\n//          *  테마별 지도 조회 \r\n//          *********************************************************************/\r\n\r\n                    \r\n//                         // 장소 검색 객체를 생성합니다\r\n//             var ps = new kakao.maps.services.Places(map); \r\n\r\n//             // 지도에 idle 이벤트를 등록합니다\r\n//             kakao.maps.event.addListener(map, 'idle', searchPlaces);\r\n\r\n//             // 커스텀 오버레이의 컨텐츠 노드에 css class를 추가합니다 \r\n//             contentNode.className = 'placeinfo_wrap';\r\n\r\n//             // 커스텀 오버레이의 컨텐츠 노드에 mousedown, touchstart 이벤트가 발생했을때\r\n//             // 지도 객체에 이벤트가 전달되지 않도록 이벤트 핸들러로 kakao.maps.event.preventMap 메소드를 등록합니다 \r\n//             addEventHandle(contentNode, 'mousedown', kakao.maps.event.preventMap);\r\n//             addEventHandle(contentNode, 'touchstart', kakao.maps.event.preventMap);\r\n\r\n//             // 커스텀 오버레이 컨텐츠를 설정합니다\r\n//             placeOverlay.setContent(contentNode);  \r\n\r\n//             // 각 카테고리에 클릭 이벤트를 등록합니다\r\n//             addCategoryClickEvent();\r\n\r\n//             // 엘리먼트에 이벤트 핸들러를 등록하는 함수입니다\r\n//             function addEventHandle(target, type, callback) {\r\n//                 if (target.addEventListener) {\r\n//                     target.addEventListener(type, callback);\r\n//                 } else {\r\n//                     target.attachEvent('on' + type, callback);\r\n//                 }\r\n//             }\r\n\r\n//             // 카테고리 검색을 요청하는 함수입니다\r\n//             function searchPlaces() {\r\n//                 if (!currCategory) {\r\n//                     return;\r\n//                 }\r\n                \r\n//                 // 커스텀 오버레이를 숨깁니다 \r\n//                 placeOverlay.setMap(null);\r\n\r\n//                 // 지도에 표시되고 있는 마커를 제거합니다\r\n//                 removeMarker();\r\n                \r\n//                 ps.categorySearch(currCategory, placesSearchCB, {useMapBounds:true}); \r\n//             }\r\n\r\n\r\n//             searchPlaces(removeMarker,placesSearchCB,ps,currCategory)\r\n//             // 장소검색이 완료됐을 때 호출되는 콜백함수 입니다\r\n//             function placesSearchCB(data, status, pagination) {\r\n//                 if (status === kakao.maps.services.Status.OK) {\r\n\r\n//                     // 정상적으로 검색이 완료됐으면 지도에 마커를 표출합니다\r\n//                     displayPlaces(data);\r\n//                 } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\r\n//                     // 검색결과가 없는경우 해야할 처리가 있다면 이곳에 작성해 주세요\r\n\r\n//                 } else if (status === kakao.maps.services.Status.ERROR) {\r\n//                     // 에러로 인해 검색결과가 나오지 않은 경우 해야할 처리가 있다면 이곳에 작성해 주세요\r\n                    \r\n//                 }\r\n//             }\r\n\r\n//             // 지도에 마커를 표출하는 함수입니다\r\n//             function displayPlaces(places) {\r\n\r\n//                 // 몇번째 카테고리가 선택되어 있는지 얻어옵니다\r\n//                 // 이 순서는 스프라이트 이미지에서의 위치를 계산하는데 사용됩니다\r\n//                 var order = document.getElementById(currCategory).getAttribute('data-order');\r\n\r\n                \r\n\r\n//                 for ( var i=0; i<places.length; i++ ) {\r\n\r\n//                         // 마커를 생성하고 지도에 표시합니다\r\n//                         var marker = addMarker(new kakao.maps.LatLng(places[i].y, places[i].x), order);\r\n\r\n//                         // 마커와 검색결과 항목을 클릭 했을 때\r\n//                         // 장소정보를 표출하도록 클릭 이벤트를 등록합니다\r\n//                         (function(marker, place) {\r\n//                             kakao.maps.event.addListener(marker, 'click', function() {\r\n//                                 displayPlaceInfo(place);\r\n//                             });\r\n//                         })(marker, places[i]);\r\n//                 }\r\n//             }\r\n\r\n//             // 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\r\n//             function addMarker(position, order) {\r\n//                 var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/places_category.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다\r\n//                     imageSize = new kakao.maps.Size(27, 28),  // 마커 이미지의 크기\r\n//                     imgOptions =  {\r\n//                         spriteSize : new kakao.maps.Size(72, 208), // 스프라이트 이미지의 크기\r\n//                         spriteOrigin : new kakao.maps.Point(46, (order*36)), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\r\n//                         offset: new kakao.maps.Point(11, 28) // 마커 좌표에 일치시킬 이미지 내에서의 좌표\r\n//                     },\r\n//                     markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),\r\n//                         marker = new kakao.maps.Marker({\r\n//                         position: position, // 마커의 위치\r\n//                         image: markerImage \r\n//                     });\r\n\r\n//                 marker.setMap(map); // 지도 위에 마커를 표출합니다\r\n//                 markers.push(marker);  // 배열에 생성된 마커를 추가합니다\r\n\r\n//                 return marker;\r\n//             }\r\n\r\n//             // 지도 위에 표시되고 있는 마커를 모두 제거합니다\r\n//             function removeMarker() {\r\n//                 for ( var i = 0; i < markers.length; i++ ) {\r\n//                     markers[i].setMap(null);\r\n//                 }   \r\n//                 markers = [];\r\n//             }\r\n\r\n//             // 클릭한 마커에 대한 장소 상세정보를 커스텀 오버레이로 표시하는 함수입니다\r\n//             function displayPlaceInfo (place) {\r\n//                 var content = '<div class=\"placeinfo\">' +\r\n//                                 '   <a class=\"title\" href=\"' + place.place_url + '\" target=\"_blank\" title=\"' + place.place_name + '\">' + place.place_name + '</a>';   \r\n\r\n//                 if (place.road_address_name) {\r\n//                     content += '    <span title=\"' + place.road_address_name + '\">' + place.road_address_name + '</span>' +\r\n//                                 '  <span class=\"jibun\" title=\"' + place.address_name + '\">(지번 : ' + place.address_name + ')</span>';\r\n//                 }  else {\r\n//                     content += '    <span title=\"' + place.address_name + '\">' + place.address_name + '</span>';\r\n//                 }                \r\n            \r\n//                 content += '    <span class=\"tel\">' + place.phone + '</span>' + \r\n//                             '</div>' + \r\n//                             '<div class=\"after\"></div>';\r\n\r\n//                 contentNode.innerHTML = content;\r\n//                 placeOverlay.setPosition(new kakao.maps.LatLng(place.y, place.x));\r\n//                 placeOverlay.setMap(map);  \r\n//             }\r\n\r\n\r\n//             // 각 카테고리에 클릭 이벤트를 등록합니다\r\n//             function addCategoryClickEvent() {\r\n//                 var category = document.getElementById('category'),\r\n//                     children = category.children;\r\n\r\n//                 for (var i=0; i<children.length; i++) {\r\n//                     children[i].onclick = onClickCategory;\r\n//                 }\r\n//             }\r\n\r\n//             // 카테고리를 클릭했을 때 호출되는 함수입니다\r\n//             function onClickCategory() {\r\n//                 var id = this.id,\r\n//                     className = this.className;\r\n\r\n//                 let placeOverlay = placeOverlay.setMap(null);\r\n\r\n//                 if (className === 'on') {\r\n//                     currCategory = '';\r\n//                     changeCategoryClass();\r\n//                     removeMarker();\r\n//                 } else {\r\n//                     currCategory = id;\r\n//                     changeCategoryClass(this);\r\n//                     searchPlaces();\r\n//                 }\r\n//             }\r\n\r\n//             // 클릭된 카테고리에만 클릭된 스타일을 적용하는 함수입니다\r\n//             function changeCategoryClass(el) {\r\n//                 var category = document.getElementById('category'),\r\n//                     children = category.children,\r\n//                     i;\r\n\r\n//                 for ( i=0; i<children.length; i++ ) {\r\n//                     children[i].className = '';\r\n//                 }\r\n\r\n//                 if (el) {\r\n//                     el.className = 'on';\r\n//                 } \r\n//             } \r\n\r\n//         /************************************************************************* */\r\n//         console.log(\"loading kakaomap\");\r\n//       }, []);\r\n      \r\n//     return (\r\n//         <div>\r\n//             wwdwdsdsdsd\r\n//             <div style={{width:'500px',height:'400px'}} id=\"map\">\r\n//             <ul id=\"category\">\r\n//         <li onClick={()=>searchPlaces('BK9')}id=\"BK9\" data-order=\"0\"> \r\n//             <span class=\"category_bg bank\"></span>\r\n//             은행\r\n//         </li>       \r\n//         <li id=\"MT1\" data-order=\"1\"> \r\n//             <span class=\"category_bg mart\"></span>\r\n//             마트\r\n//         </li>  \r\n//         <li id=\"PM9\" data-order=\"2\"> \r\n//             <span class=\"category_bg pharmacy\"></span>\r\n//             약국\r\n//         </li>  \r\n//         <li id=\"OL7\" data-order=\"3\"> \r\n//             <span class=\"category_bg oil\"></span>\r\n//             주유소\r\n//         </li>  \r\n//         <li id=\"CE7\" data-order=\"4\"> \r\n//             <span class=\"category_bg cafe\"></span>\r\n//             카페\r\n//         </li>  \r\n//         <li id=\"CS2\" data-order=\"5\"> \r\n//             <span class=\"category_bg store\"></span>\r\n//             편의점\r\n//         </li>      \r\n//     </ul>\r\n//                 </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Food;"]},"metadata":{},"sourceType":"module"}